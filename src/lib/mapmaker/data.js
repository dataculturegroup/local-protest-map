import Papa from 'papaparse';

const defaultPapaParseOptions = {
  header: true,               // First row is headers
  dynamicTyping: true,        // Convert numbers/booleans
  skipEmptyLines: true,       // Skip empty rows
  delimitersToGuess: [','], // Try to auto-detect delimiter
};

export async function getData(url) {
  const response = await fetch(url);
  const csvText = await response.text();
  const results = await Papa.parse(csvText, defaultPapaParseOptions);
  return results.data;
}

/**
 * Determines if a location is within a specified radius (in miles) of a reference point
 * (Generated by Claude AI).
 * @param {number} refLat - Reference point latitude in decimal degrees
 * @param {number} refLng - Reference point longitude in decimal degrees
 * @param {number} targetLat - Target location latitude in decimal degrees
 * @param {number} targetLng - Target location longitude in decimal degrees
 * @param {number} radiusMiles - The radius in miles (default: 50)
 * @returns {boolean} - True if the target is within the radius, false otherwise
 */
export function isWithinRadius(refLat, refLng, targetLat, targetLng, radiusMiles = 50) {
    // Earth's radius in miles
  const earthRadiusMiles = 3958.8;
  
  // Convert latitude and longitude from degrees to radians
  const refLatRad = toRadians(refLat);
  const refLngRad = toRadians(refLng);
  const targetLatRad = toRadians(targetLat);
  const targetLngRad = toRadians(targetLng);
  
  // Calculate differences
  const latDiff = targetLatRad - refLatRad;
  const lngDiff = targetLngRad - refLngRad;
  
  // Haversine formula
  const a = Math.sin(latDiff / 2) * Math.sin(latDiff / 2) +
            Math.cos(refLatRad) * Math.cos(targetLatRad) *
            Math.sin(lngDiff / 2) * Math.sin(lngDiff / 2);
  
  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
  
  // Distance in miles
  const distance = earthRadiusMiles * c;
  
  // Return true if the distance is less than or equal to the radius
  return distance <= radiusMiles;
}

/**
 * Converts degrees to radians
 * @param {number} degrees - Angle in degrees
 * @returns {number} - Angle in radians
 */
function toRadians(degrees) {
  return degrees * (Math.PI / 180);
}
